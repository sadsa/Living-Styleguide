{
  "name": "sassdown",
  "description": "Grunt plugin for building living styleguides with Handlebars from Markdown comments in CSS, SASS and LESS files",
  "version": "0.2.7",
  "author": {
    "name": "Jesper Hills",
    "email": "jay@nopr.co",
    "url": "http://www.nopr.co"
  },
  "homepage": "https://github.com/nopr/sassdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/nopr/sassdown.git"
  },
  "bugs": {
    "url": "https://github.com/nopr/sassdown/issues"
  },
  "licenses": [
    {
      "type": "Creative Commons",
      "url": "http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1",
    "cheerio": "~0.18.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "dependencies": {
    "junk": "~0.2.2",
    "cssmin": "~0.4.1",
    "marked": "~0.2.10",
    "handlebars": "~1.3.0",
    "highlight.js": "~8.0.0",
    "html-entities": "~1.0.10"
  },
  "readme": "# sassdown\n\n> Grunt plugin for building living styleguides with Handlebars from Markdown comments in CSS, SASS and LESS files.\n\n**Note: *This plugin is in semi-active development!* So expect it to be a little rough around the edges. If you have any questions, issues or suggestions get in touch. Currently on version `0.2.7`.**\n\n1. [Getting started](#getting-started)\n2. [Sassdown task](#sassdown-task)\n    - [Overview](#overview)\n    - [Options](#options)\n    - [Usage](#usage)\n3. [Markdown](#markdown)\n4. [Handlebars](#handlebars)\n5. [Highlight.js](#highlightjs)\n6. [Data Objects](#data-objects)\n    - [Page](#page)\n    - [Pages](#pages)\n7. [Template](#template)\n8. [SASS](#sass)\n\n### What's new in version 0.2.7?\n\n- Path resolving is relative; no more issues serving from localhost or using file:// protocols\n- Whitespace and preformatting is preserved in markup results\n- Source styles shown in conjunction with markup and result\n- Pages are served form an array-literal node tree; meaning clearer and nested navigation\n- Comment block matching is modifiable via regular expressions\n- Choice of syntax highlighting styles from various popular Highlight.js themes\n- Syntax highlighting is done with Node before templates compile; faster page loads\n\n## Getting started\n\nInstall this plugin with this command:\n\n```bash\nnpm install sassdown --save-dev\n```\n\nEnabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('sassdown');\n```\n\n## Sassdown Task\n\nRun the task using `grunt sassdown`. Task targets, files and options may be specified according to the grunt [configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n### Overview\nIn your project's Gruntfile, add a section named `sassdown` to the data object passed into `grunt.initConfig()`.\n\n```js\nsassdown: {\n    options: {\n        // Task-specific options go here.\n    },\n    target: {\n        // Target-specific file lists and/or options go here.\n    },\n},\n```\n\n### Options\n\n#### options.assets\nType: `Array`<br/>\nDefault: `null`\n\n*Optional*. Array of file paths. Will be included into the styleguide output. Supports [globbing](http://gruntjs.com/configuring-tasks#globbing-patterns). Supports relative and absolute file paths (eg. `http://`, `https://`, `//` or even `file://`).\n\n#### options.template\nType: `String`<br/>\nDefault: `null`\n\n*Optional*. A path to a Handlebars template file. Will use default Sassdown template if left blank.\n\n#### options.handlebarsHelpers\nType: `Array`<br/>\nDefault: `null`\n\n*Optional*. Array of file paths. The [Handlebars helpers](http://handlebarsjs.com/#helpers) will be available to use in the template. Supports [globbing](http://gruntjs.com/configuring-tasks#globbing-patterns). Supports relative and absolute file paths (eg. `http://`, `https://` or even `file://`).\n\n#### options.theme\nType: `String`<br/>\nDefault: `null`\n\n*Optional*. A path to a theme stylesheet. Will use default Sassdown theme if left blank.\n\n#### options.readme\nType: `String`<br/>\nDefault: `null`\n\n*Optional*. Path to a README file. When set, this file will be parsed with Markdown and used as the index page for the styleguide.\n\n#### options.highlight\nType: `String`<br/>\nDefault: `github`\n\n*Optional*. Choice of syntax highlighting style. Defaults to `github`, but other available options are: `docco`, `monokai`, `solarized-light`, `solarized-dark` or `xcode`.\n\n#### options.scripts\nType: `Array`<br/>\nDefault: `null`\n\n*Optional*. Array of file paths. The scripts will be linked with script tags with src attributes. Supports [globbing](http://gruntjs.com/configuring-tasks#globbing-patterns). Supports relative and absolute file paths (eg. `http://`, `https://`, `//` or even `file://`).\n\nIf this option is set the default scripts won't be included, but you can include them again by adding `node_modules/sassdown/tasks/data/scripts.js` to the file list, or by copying and modifying that file.\n\n#### options.commentStart\nType: `RegExp`<br/>\nDefault: `/\\/\\*/`\n\n*Optional*. A regular expression to match beginning part of a comment block. Defaults to regular block comment (`/*`).\n\n#### options.commentEnd\nType: `RegExp`<br/>\nDefault: `/\\*\\//`\n\n*Optional*. A regular expression to match ending part of a comment block. Defaults to regular block comment (`*/`).\n\n#### options.excludeMissing\nType: `Boolean`<br/>\nDefault: `false`\n\n*Optional*. When set to true, Sassdown will ignore any files that do not contain matching or valid comment blocks.\n\n#### options.dryRun\nType: `Boolean`<br/>\nDefault: `false`\n\n*Optional*. When set to true, Sassdown will not generate any files, and will exit with status `1` if any files do not contain matching or valid comment blocks.\n\n### Usage\n\nYou will need to use an [expanded files object](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically), but here is roughly the minimum configuration required.\n```js\nsassdown: {\n    styleguide: {\n        options: {\n            assets: ['public/css/*.css']\n        },\n        files: [{\n            expand: true,\n            cwd: 'src/sass',\n            src: ['*.scss'],\n            dest: 'public/styleguide/'\n        }]\n    }\n},\n```\n\nOn larger projects you may need to include additional assets and customise the output with a user theme, template and scripts.\n```js\nsassdown: {\n    styleguide: {\n        options: {\n            assets: [\n                'public/css/**/*.min.css',\n                'public/js/*.min.js',\n                'http://use.typekit.net/sea5yvm.js',\n            ],\n            theme: 'src/styleguide/theme.css',\n            template: 'src/styleguide/template.hbs',\n            scripts: ['src/styleguide/*.js'],\n            readme: 'src/assets/sass/readme.md',\n            highlight: 'monokai',\n            excludeMissing: true\n        },\n        files: [{\n            expand: true,\n            cwd: 'src/assets/sass',\n            src: [\n                'partials/**/*.{scss,sass}',\n                'modules/**/*.{scss,sass}'\n            ],\n            dest: 'public/styleguide/'\n        }]\n    }\n},\n```\n\n# Markdown\n\nSassdown uses [Markdown](https://github.com/chjj/marked) to parse any block comments in your SASS files. From these, it generates the text content in the styleguide. Any recognised code blocks will be rendered as HTML/SCSS source-result pairs.\n\n## Structure\n\nYou may use any Markdown-compatible [heading syntax](https://github.com/nopr/sassdown/issues/7) you like. You may use any common style of [block-comment syntax](https://github.com/nopr/sassdown/issues/12#issuecomment-28219982) you like. Code blocks may be fenced or indented (four spaces). Below are several examples; each will be correctly parsed by Sassdown into identical output.\n\n### Example .scss file\n\n```scss\n/*\n\nAlerts\n======\n\nCreates an alert box notification using the `.alert-` prefix. The following options are available:\n\n    <div class=\"alert-success\">Success</div> \n    <div class=\"alert-warning\">Warning</div> \n    <div class=\"alert-error\">Error</div>\n\n*/\n@mixin alert($colour){\n    color: darken($colour, 50%);\n    background: $colour;\n    border-radius: 5px;\n    margin-bottom: 1em;\n    padding: 1em;\n}\n.alert-success { @include alert(#e2f3c1) }\n.alert-warning { @include alert(#fceabe) }\n.alert-error   { @include alert(#ffdcdc) }\n```\n\n# Handlebars\n\n[Handlebars](http://handlebarsjs.com/) is a semantic templating syntax. Put simply, it allows you to output dynamic properties in HTML using `{{var}}` from a variety of data sources such as JSON.\n\nSassdown uses Handlebars to output data from the [data objects](#data-objects) it creates. Your `.hbs` file specified in the `template` option may contain code that looks like this for example:\n\n```html\n{{#each page.sections}}\n    <div class=\"section\">\n        {{#if comment}}\n            <div class=\"comment\">{{{comment}}}</div>\n        {{/if}}\n        {{#if result}}\n            <div class=\"result\">{{{result}}}</div>\n        {{/if}}\n        {{#if markup}}\n            <div class=\"markup\">{{{markup}}}</div>\n        {{/if}}\n        {{#if styles}}\n            <div class=\"styles\">{{{styles}}}</div>\n        {{/if}}\n    </div>\n{{/each}}\n```\n\n### Common partials\n\nSassdown also provides a series of Handlebars **partials**, which can be used to output specific information on each page. These are:\n\n* `{{> root}}`<br>Outputs a path to the root directory of the styleguide, relative to whatever page you are on.\n \n* `{{> assets}}`<br>Outputs a set of `<link />` or `<script>` tags that include assets specified in the Grunt task options.\n \n* `{{> theme}}`<br>Outputs the theme stylesheet, minified, into a `<style>` tag.\n\n### Handlebars helpers\n\nYou can add more features to Handlebar templates by using [Helpers](http://handlebarsjs.com/#helpers).\n\nFor example you could add a helper that capitalizes all text:\n\n    <big>{{uppercase shoutThis}}</big>\n    \nYou load your helpers with the `handlebarsHelpers` option.\n\n    handlebarsHelpers: ['hb-helpers/**/*.js']\n\nThe helper module must export a function that does the registration, or else it won't load.\n\n    module.exports = function(Handlebars) {\n        Handlebars.registerHelper('uppercase', function(input) {\n          return typeof input === 'string' ? input.toUpperCase() : input;\n        });\n    };\n    \n    // This also works\n    module.exports = {\n      register: function(Handlebars) {\n        ...\n    }\n\n# Highlight.js\n\nSassdown uses the popular and well-supported [Highlight.js](http://highlightjs.org/) for syntax highlighting. Markup is parsed by a Node module and highlighted before being output through the template. Various popular themes are supported via the task options.\n\n# Data Objects\n\nTwo objects are parsed into the Handlebars template; `Page` and `Pages`. **Page** contains json data for the current page only; **Pages** is an array literal containing all Page objects in a nested node tree.\n\nAny property within these objects can be output by Handlebars using `{{helpers}}`. You can iterate through objects using `{{#each}} ... {{/each}}`, for example.\n\n## Page\n\n```js\n{\n  title: 'Alerts',\n  slug: '_alerts',\n  href: 'objects/user/_alerts.html',\n  dest: 'test/example/styleguide/objects/user/_alerts.html',\n  src: 'test/example/assets/sass/partials/objects/user/_alerts.scss',\n  sections: [ \n    {\n      id: 'mswbu',\n      comment: '<h1 id=\"alerts\">Alerts</h1>\\n<p>Creates an alert box notification using the <code>.alert-</code> prefix. The following options are available:</p>\\n',\n      result: '\\n<div class=\"alert-success\">Success</div> \\n<div class=\"alert-warning\">Warning</div> \\n<div class=\"alert-error\">Error</div>\\n',\n      markup: '<pre><code><span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span> <span class=\"token attr-name\" >class</span><span class=\"token attr-value\" ><span class=\"token punctuation\" >=</span>&quot;alert-success&quot;&gt;</span></span>Success<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >&gt;</span></span> \\n<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span> <span class=\"token attr-name\" >class</span><span class=\"token attr-value\" ><span class=\"token punctuation\" >=</span>&quot;alert-warning&quot;&gt;</span></span>Warning<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >&gt;</span></span> \\n<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span> <span class=\"token attr-name\" >class</span><span class=\"token attr-value\" ><span class=\"token punctuation\" >=</span>&quot;alert-error&quot;&gt;</span></span>Error<span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >&gt;</span></span></code></pre>\\n',\n      styles: '<pre><code><span class=\"token keyword\" >@mixin</span> alert(<span class=\"token variable\" >$colour</span>)<span class=\"token punctuation\" >{</span>\\n    <span class=\"token property\" >color</span><span class=\"token punctuation\" >:</span> darken(<span class=\"token variable\" >$colour</span>, 50%)<span class=\"token punctuation\" >;</span>\\n    <span class=\"token property\" >background</span><span class=\"token punctuation\" >:</span> <span class=\"token variable\" >$colour</span><span class=\"token punctuation\" >;</span>\\n    <span class=\"token property\" >border-radius</span><span class=\"token punctuation\" >:</span> 5px<span class=\"token punctuation\" >;</span>\\n    <span class=\"token property\" >margin-bottom</span><span class=\"token punctuation\" >:</span> 1em<span class=\"token punctuation\" >;</span>\\n    <span class=\"token property\" >padding</span><span class=\"token punctuation\" >:</span> 1em<span class=\"token punctuation\" >;</span>\\n<span class=\"token punctuation\" >}</span>\\n\\n.alert-success <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >@include</span> alert(#e2f3c1) <span class=\"token punctuation\" >}</span>\\n.alert-warning <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >@include</span> alert(#fceabe) <span class=\"token punctuation\" >}</span>\\n.alert-error   <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >@include</span> alert(#ffdcdc) <span class=\"token punctuation\" >}</span></code></pre>\\n'\n    }\n  ]\n}\n```\n\n## Pages\n\n```js\n[\n  {\n    name: 'base',\n    isDirectory: true,\n    pages: [\n      [Object],\n      {\n        name: 'typography',\n        isDirectory: true,\n        pages: [\n          [Object],\n          [Object],\n          [Object]\n        ]\n      },\n      [Object],\n      [Object]\n    ]\n  },\n  {\n    name: 'partials',\n    isDirectory: true,\n    pages: [\n      [Object],\n      [Object]\n    ]\n  },\n  {\n    name: 'modules',\n    isDirectory: true,\n    pages: [\n      [Object] \n    ]\n  },\n  {\n    name: 'objects',\n    isDirectory: true,\n    pages: [\n      [Object],\n      [Object], \n      [Object]\n    ]\n  }\n]\n```\n\n# Template\n\nShould you wish to create a new Sassdown template, you may wish to use the [existing default template.hbs](https://github.com/nopr/sassdown/blob/master/tasks/data/template.hbs) as a base to work from. \n\n# Sass\n\nIt should be noted that, despite the name, Sassdown does not explicitly read only SASS files. It works just fine with .sass, .less, .css or even .txt files.\n\nSassdown **does not** compile your source files. Assuming you are using SASS, and since you're using Grunt, I would recommend the [grunt-contrib-compass](https://github.com/gruntjs/grunt-contrib-compass) plugin for this task. However you may also want to look at [grunt-contrib-stylus](https://github.com/gruntjs/grunt-contrib-stylus).\n\n# Project Milestones\n\n*Current [milestones](https://github.com/nopr/sassdown/issues/milestones) for this project*\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n",
  "readmeFilename": "README.md",
  "_id": "sassdown@0.2.7",
  "dist": {
    "shasum": "f182649bcd02b385ff53424398d1d0bb12526d64"
  },
  "_from": "sassdown@^0.2.7",
  "_resolved": "https://registry.npmjs.org/sassdown/-/sassdown-0.2.7.tgz"
}
